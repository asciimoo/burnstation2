#!/usr/bin/env python
# -*- coding: utf-8 -*-

# ----------------------------------------------------------------------------
# pyjama - python jamendo audioplayer
# Copyright (c) 2008 Daniel NÃ¶gel
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
# ----------------------------------------------------------------------------

## @package clSettings
# Settings Module

import functions
import ConfigParser, os

## Main config class
# holds functions to access config file
class settings():
    ## The Constructor
    # @param self The Object pointer
    # @param parent Pyjama Object Pointer
    def __init__(self, parent=None):
        ## Pointer to Pyjama
        self.parent = parent
        home = functions.preparedirs()
        install_dir = functions.install_dir()

        ## stores the config file URI
        self.home_config = os.path.join(home, 'pyjama.cfg')

        ## Parser Object Pointer
        self.config = ConfigParser.SafeConfigParser()
        self.config.readfp(open(os.path.join(install_dir, 'pyjama.cfg')))
        self.config.read([self.home_config])

        ## List holding options from pyjama.cfg
        self.options = {}

        sections = self.config.sections()
        for section in sections:
            items = self.config.items(section)
            for item, value in items:
                pos = value.find("#")
                pos = value.find(";")
                if pos > -1:
                    value = value[0:pos]
                if value.isdigit():
                    self.options[item] = int(value)
                elif (self.isbool(value)):
                    self.options[item] = self.parsebool(value)
                else:
                    self.options[item] = value

    ## Tests whether a section exists or not
    # @param self The Object pointer
    # @param self The Object pointer
    # @param section A string
    # @return bool
    def section_exists(self, section):
        return self.config.has_section(section)

    ## Tests whether an option exists or not
    # @param self The Object pointer
    # @param self The Object Pointer
    # @param section The section in which the option should be found as string
    # @param option The option to test for as string
    # @return bool
    def option_exists(self, section, option):
        return self.config.has_option(section, option)

    ## Set a option's value and write it to pyjama.cfg
    # @param self The Object pointer
    # @param section The section as string
    # @param option The option as string
    # @param value The value to set as string
    # @param func A function to run over the value
    # before it is written to config
    # @return bool
    def set_value(self, section, option, value, func=None):
        if not self.section_exists(section):
            self.config.add_section(section)
        if func is not None:
            self.config.set(section, option, func(str(value)))
        else:
            self.config.set(section, option, str(value))
        self.write_config()

    ## Reads a value from an option
    # @param self The Object pointer
    # @param section A section as string
    # @param option An option as string
    # @param default A default value
    # @param func A function to run over the value
    # read out - think of float conversions etc.
    # @return The option's value or default if section or option do not exist
    def get_value(self, section, option, default=None, func=None):
        if not self.section_exists(section): 
            if self.parent is not None:
                if self.parent.debug:
                    print ("No section '%s:%s': returning default value (%s)" % (section, option, str(default)))
            if func is None:
                return default
            else:
                return func(default)
        if not self.option_exists(section, option): 
            if self.parent is not None:
                if self.parent.debug:
                    print ("No option '%s:%s': returning default value (%s)" % (section, option, str(default)))
            if func is None:
                return default
            else:
                return func(default)
        value = self.config.get(section, option)
        pos = value.find("#")
        pos = value.find(";")
        if pos > -1:
            value = value[0:pos]
        if value.isdigit():
            ret = int(value)
        elif (self.isbool(value)):
            ret = self.parsebool(value)
        else:
            ret = value

        if func is None:
            return ret
        else:
            return func(ret)

    ## Removes an option from pyjama.cfg
    # @param self The Object pointer
    # @param section The option's section
    # @param option The option to delete
    # @return bool
    def remove_option(self, section, option):
        ret = self.config.remove_option(section, option)
        self.write_config()
        return ret

    ## Writes pyjama.cfg to disc
    # In most cases this is done by set_value automatically
    # @param self The Object pointer
    # @return None
    def write_config(self):
        if not functions.is_writeable(self.home_config):
            try:
                self.parent.Events.raise_event("error", "No write access for %s" % self.home_config)
            except:
                print "No write access for %s" % self.home_config
            return
        fh = open(self.home_config,"w")
        if fh:
            self.config.write(fh)    
        else:
            if self.parent:
                self.parent.Events.raise_event("error", "Error writing configuration to %s" % self.home_config)
            else:
                print "Error writing configuration to %s" % self.home_config
        fh.close()

    ## Tests if a string contains a boolean
    # @param self The Object pointer
    # @param string The strint to test
    # @return bool
    def isbool(self, string):
        if string.upper() == "TRUE" or string.upper() == "FALSE":
            return True
        return False

    ## Return the boolean value a string contains
    # @param self The Object pointer
    # @return bool
    def parsebool(self, string):
        return string[0].upper()=="T"





#x = config.get("JAMENDO", "CACHING_TIME_SHORT") 

#getint 
#getfloat
#getboolean
