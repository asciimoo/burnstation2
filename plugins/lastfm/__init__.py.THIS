#!/usr/bin/env python
import logging, os, urllib2, urllib
from time import time
logging.basicConfig(level=logging.DEBUG)

try:
    from scrobbler import Scrobbler
except:
    logging.error('scrobbler not found')
    raise

try:
    import gtk
except:
    logging.error('gtk not found')
    raise

try:
    # for python 2.6
    from hashlib import md5
except ImportError:
    from md5 import md5

class main():
    ## The Constructor
    # @param self Object pointer
    # @param pyjama Reference to the pyjama object
    def __init__(self, pyjama):
    	self.pyjama = pyjama
        self.Events = self.pyjama.Events

        self.login=self.pyjama.settings.get_value('LASTFM','LOGIN')
        self.password=self.pyjama.settings.get_value('LASTFM','PASS')

        self.Events.connect_event("nowplaying", self.ev_nowplaying)
        self.Events.connect_event('scrobble_to_lastfm', self.ev_scrobble)


        # login to last.fm
        try:
            # pyjama has own last.fm clien id 'pyj'
            self.scrobbler=Scrobbler(client=('pyj','0.3'))
            self.scrobbler.login(self.login, self.password)
        except Exception, e:
            logging.error(e)

            self.scrobbler = None
            raise

        logging.debug('last.fm plugin loaded')

    
    def ev_nowplaying(self,track):
        """ for sending now playing notification to last.fm """
        logging.debug('nowplaying: %s' % track)

        if self.pyjama.settings.get_value('LASTFM','SCROBBLING'):
            if not self.scrobbler.now_playing(track['artist_name'], track['name'], album=track['album_name'], length=track['duration']):
                logging.warn('cat\' send nowplaying info to last.fm')
            else:
                logging.info('nowplaying %s - %s send to last.fm' % (track['artist_name'], track['name']))
        else:
            logging.debug('nowplaying info doesn\'t send - scrobbling is off')

    def ev_scrobble(self,track):
        """ for scrobbling to last.fm """
        logging.debug('track: %s' % track)

        
        if self.pyjama.settings.get_value('LASTFM','SCROBBLING'):
            try:
                self.scrobbler.submit(track['artist_name'],track['name'],int(time()),length=track['duration'])
            except Exception, e:
                logging.error(e)
                raise

            if not self.scrobbler.flush():
                logging.warn('last.fm plugin: can\'t scrobble song')
            else:
                logging.info('song %s - %s send to last.fm' % (track['artist_name'], track['name']))
            
            
            
        else:
            logging.debug('song doesn\' scrobbled - scrobbling is off')
        



    class Preferences():
        ## Preferences Constructor
        # @param self Object Pointer
        # @param pyjama Again we have a pyjama object reference passed to our class
        def __init__(self, pyjama):
            # get settings
            login_value=pyjama.settings.get_value('LASTFM','LOGIN','login')
            pass_value=pyjama.settings.get_value('LASTFM','PASS', 'password')
            scrobble_value=pyjama.settings.get_value('LASTFM','SCROBBLING',False)

            logging.debug('settings on start: %s:%s %s' % (login_value,pass_value,str(scrobble_value)))
            
            dialog = gtk.Dialog(buttons=(gtk.STOCK_CANCEL, gtk.RESPONSE_REJECT,
                      gtk.STOCK_OK, gtk.RESPONSE_ACCEPT))
            dialog.set_title(_("last.fm Plugin Preferences"))
            dialog.set_default_size(100,100)

            hbox = gtk.HBox()
            dialog.vbox.pack_start(hbox, False, True)
            hbox.show()

            hbox2 = gtk.HBox()
            dialog.vbox.pack_start(hbox2, False, True)
            hbox2.show()


            # scrobble check button
            check = gtk.CheckButton(_("Scrobble to last.fm?"))
            check.set_active(scrobble_value)
            dialog.vbox.pack_start(check, False, True)

            # login field
            llabel=gtk.Label(_('Login:'))
            hbox.pack_start(llabel, False, True)

            login = gtk.Entry(max=0)
            login.set_text(login_value)
            hbox.pack_end(login, False, True)

            # password field
            plabel=gtk.Label(_('Password:'))
            hbox2.pack_start(plabel, False, True)

            password = gtk.Entry(max=0)
            password.set_visibility(False)            
            password.set_text(pass_value)

            password.set_visibility(False)            

            hbox2.pack_end(password, False, True)

            dialog.show_all()
            result = dialog.run()
            dialog.destroy()
            # set new settings
            if result == -3:#gtk.RESPONSE_OK:
                pyjama.settings.set_value('LASTFM','LOGIN', str(login.get_text()))
                logging.debug('new login: %s' % login.get_text())

                pyjama.settings.set_value('LASTFM','PASS',str(password.get_text()))
                logging.debug('new pass: %s' % password.get_text())

                pyjama.settings.set_value('LASTFM','SCROBBLING',str(check.get_active()))
                logging.debug('new scrobble vaule: %s' % check.get_active())

                if check.get_active():
                    try:
                        # pyjama has own last.fm clien id 'pyj'
                        scrobbler.login(str(login.get_text()), str(password.get_text()), client=('pyj','0.3'))
                    except Exception, e:
                        logging.error(e)
                        #raise


