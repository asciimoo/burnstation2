#!/usr/bin/env python
# -*- coding: utf-8 -*-

# ----------------------------------------------------------------------------
# pyjama - python jamendo audioplayer
# Copyright (c) 2008 Daniel NÃ¶gel
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
# ----------------------------------------------------------------------------

######################################################################
#                                                                    #
#                     Some default Layouts                           #
#                                                                    #
######################################################################    
#
# Top Layout - main album browser
#

import gtk
import os
import sys
import urllib
from time import strftime, gmtime, time, sleep
from math import floor
import hashlib

from modules import clWidgets, clThreadedDownload, clEntry, functions


#
# Plugin
#
class main():
    def __init__(self, pyjama):
        self.pyjama = pyjama
        self.pyjama.Events.connect_event("alldone", self.alldone)

    def alldone(self):
        self.pyjama.layouts.register_layout("radios", RadioBrowser(self.pyjama))

        #
        # Add menu entry to Extras-menu
        #
        menu = self.pyjama.window.menubar
        entry = menu.append_entry(menu.get_rootmenu("Browse"), _("Radios"), "Radios")
        if not "radios" in sys.argv:
            entry.set_sensitive(False)
        entry.connect("activate", self.ev_show_radio_layout)
        menu.set_item_image(entry, os.path.join(functions.install_dir(), "images", "radio.png"))
#        import_star = menu.append_entry(menu.get_rootmenu("Extras"), _("Import Stared Albums"), "ImportStar")
#        import_star.connect("activate", self.ev_import_stared_albums)
#        menu.set_item_image(import_star, gtk.STOCK_NETWORK) 


    def ev_show_radio_layout(self, widget):
        self.pyjama.layouts.show_layout("radios", None, None)

#
# Radio Widget
#
class RadioWidget(gtk.Frame):
    def __init__(self, pyjama, radio_id, name, image, album_image=None):
        self.pyjama = pyjama
        gtk.Frame.__init__(self)

        img = gtk.Image()
        img.show()

        lbl = clWidgets.MyLinkButton(name, name)
        lbl.show()
        self.set_label_widget(lbl)
        self.set_label_align(0.5, 0.5)
        self.set_shadow_type(gtk.SHADOW_ETCHED_OUT)
        self.set_size_request(150,160) #(150,160) before controls

        # Event-Box
        self.eventFrame = gtk.EventBox()
        self.eventFrame.set_above_child(False) # ???
        self.eventFrame.add_events (gtk.gdk.ENTER_NOTIFY_MASK)
        self.eventFrame.add_events (gtk.gdk.LEAVE_NOTIFY_MASK)
#        self.eventFrame.connect("enter-notify-event", self.show_vbControl)
#        self.eventFrame.connect("leave-notify-event", self.hide_vbControl)
#        self.eventFrame.connect("button_release_event", self.image_clicked, radio_id)
        self.eventFrame.show()

        self.eventFrame.add(img)
        self.add(self.eventFrame)

        # Image
        imgs = [image,  "radio", "stock"] #album_image
        for i in imgs:
            if i != "radio" and i != "stock":
                md5hash = hashlib.md5(i).hexdigest()
                imagepath = os.path.join(pyjama.home, "images", md5hash)
                if not os.path.exists(imagepath):
                    try:
                        urllib.urlretrieve(i, imagepath)
                        pb = gtk.gdk.pixbuf_new_from_file_at_size(imagepath, 100, 100)
                        img.set_from_pixbuf(pb)
                        return
                    except:
                        pass
                else:
                    try:
                        pb = gtk.gdk.pixbuf_new_from_file_at_size(imagepath, 100, 100)
                        img.set_from_pixbuf(pb)
                        return
                    except:
                        pass
            if i == "radio":
                try:
                    img.set_from_file(os.path.join(functions.install_dir(), "images", "radio2.png"))
                except:
                    pass
            if i == "sock":
                img.set_from_stock(gtk.STOCK_MISSING_IMAGE, gtk.ICON_SIZE_DIALOG)

#        if not os.path.exists(imagepath):
#            try:
#                urllib.urlretrieve(image, imagepath)
#                pb = gtk.gdk.pixbuf_new_from_file_at_size(imagepath, 100, 100)
##                img.set_from_file(imagepath)
#                img.set_from_pixbuf(pb)
#            except IOError:
#                print ("Could not get album cover from jamendo")
#                try:
#                    img.set_from_file(os.path.join(functions.install_dir(), "images", "radio2.png"))
#                except:
#                    img.set_from_stock(gtk.STOCK_MISSING_IMAGE, gtk.ICON_SIZE_DIALOG)
#        else:
#            try:
#                pb = gtk.gdk.pixbuf_new_from_file_at_size(imagepath, 100, 100)
##                img.set_from_file(imagepath)
#                img.set_from_pixbuf(pb)
#            except:
#                try:
#                    img.set_from_file(os.path.join(functions.install_dir(), "images", "radio2.png"))
#                except:
#                    img.set_from_stock(gtk.STOCK_MISSING_IMAGE, gtk.ICON_SIZE_DIALOG)




        


#
# Layout
#
class RadioBrowser(gtk.Layout):

    def __init__(self, pyjama):
        self.pyjama = pyjama
        
        gtk.Layout.__init__(self)
        self.set_size(700,400)                
        
        # Some default values        
        self.results_per_page = 10
#        self.ordering = "ratingweek"
#        self.tag = "all"
        self.cur_page = 1     

        
        self.radioinfos={}    
        
        self.pyjama.Events.connect_event("scrolled_window_resized", self.ev_scrolled_window_resized)

        # might be obsolet
        self.pyjama.window.setcolor(self)

    def draw(self, page=None, num=None, *args):
        if page is None: page = self.cur_page
        if num is None: num = self.results_per_page
        # Checking if next / prev page are available
        self.check_next_possible(page, num)
        self.check_prev_possible(page)


        self.pyjama.layouts.toolbars['radios'].cbResultsPerPage.set_item(num)
        self.pyjama.layouts.toolbars['radios'].lCurPage.set_text(_("Page %i") % page)
        self.cur_page = page


        for radioinfo in self.radioinfos:
            self.radioinfos[radioinfo].destroy()
        
        self.radioinfos = {}

#        query = "id+name+idstr+image+album_image/radio/json/?n=%s&pn=%s&order=numradio" % (num, page)
        query = "id+name+idstr+image/radio/json/?n=%s&pn=%s&order=numradio" % (num, page)
        ret  = self.pyjama.jamendo.query(query)
        if ret is None:
            clWidgets.tofast(self.pyjama.window)
        if ret < 0:
            pass
        if ret:
            counter = 0
            for dic in ret:
                tmp = RadioWidget(self.pyjama, dic['id'], dic['idstr'], dic['image'])#, dic['album_image'])
                tmp.show()
                tmp.eventFrame.connect("button_release_event", self.ev_play_radio, dic['id'])
                self.put(tmp, counter, counter)
                self.radioinfos[counter] = tmp
                counter += 1
        start = (page-1)*num+1
        end = (page-1)*num+num
        self.pyjama.window.LayoutInfo.set_text("Showing radios %i - %i" % (start, end))
        self.pyjama.window.LayoutInfo.set_image("radio.png")


        self.arrange_topoftheweek()
        self.show()

    def ev_play_radio(self, widget, event, radio_id):
        query = "track_id/track/jsonpretty/radio_track_inradioplaylist/?order=numradio_asc&radio_id=%i" % radio_id
        self.pyjama.jamendo.set_ignore_cache(True)
        ret = self.pyjama.jamendo.query(query)
        self.pyjama.jamendo.set_ignore_cache(False)
#        print ret, radio_id
        if ret is None:
            print ("2 fast")
            return
        if ret < 0:
            print ("Error")
            return
        if ret == []:
            print ("No tracks in this radio")
            return

        tracks = self.pyjama.db.get_multiple_trackinfos(ret)
        for track_id in ret:
            for track in tracks:
                if track.id == track_id:
                    self.pyjama.add2playlist(track)

        
    def arrange_topoftheweek(self):
        if self.radioinfos == {}: return None

        width = self.pyjama.window.scrolledwindow_width
        hspace = 20
        vspacer = 20
        
        imgwidth = 150
        imgheight = 160
        
        starty = -10
        
        y = 0
        x = 0
        for counter in self.radioinfos:
            if ((x+1) * imgwidth) + hspace*(x+1) >= width:
                y += 1
                x = 0
            self.move(self.radioinfos[counter], (imgwidth * x) + hspace*(x+1), (vspacer*(y+1) + (y * imgheight))+starty)
            x += 1
        height = (y+1) * (imgheight + vspacer) +starty
        self.set_size(width-20,height+vspacer)

    # Possible Modi:
    #
    # rating, ratingweek, ratingmonth
    # date
    # downloaded, listened, starred, playlisted
    #

    def check_next_possible(self, page=None, rpp=None):
        if page == None: page = self.cur_page
        if rpp == None: rpp = self.results_per_page
        if page >= floor(self.pyjama.db.albums / rpp) - 2:
            self.pyjama.layouts.toolbars['radios'].sbNextPage.set_sensitive(False)
        else:
            self.pyjama.layouts.toolbars['radios'].sbNextPage.set_sensitive(True)

    def check_prev_possible(self, page=None):
        if page == None: page = self.cur_page
        if page == 1:
            self.pyjama.layouts.toolbars['radios'].sbPrevPage.set_sensitive(False)
        else:
            self.pyjama.layouts.toolbars['radios'].sbPrevPage.set_sensitive(True)
        
    def ev_scrolled_window_resized(self):
        #
        # Rearrange layout
        #
        self.arrange_topoftheweek()
    #
    # Actually this toolbar is just a hbox...
    #
    class ToolBar(gtk.HBox):
        def __init__(self, pyjama):
            gtk.HBox.__init__(self)
            self.pyjama = pyjama
            self.layout = self.pyjama.layouts.layouts['radios']

            # RESULTS PER PAGE
            self.cbResultsPerPage = clWidgets.ResultsPerPageCombo()
            self.cbResultsPerPage.append_text("500")
            self.cbResultsPerPage.modelist.append("500")
#            self.cbResultsPerPage.append_text("1000")
#            self.cbResultsPerPage.modelist.append("1000")
            self.cbResultsPerPage.connect("changed", self.cbResultsPerPage_changed)
            self.pack_start(self.cbResultsPerPage, False, True, 0)
            self.cbResultsPerPage.show()

            # Page- Buttons:
            self.sbNextPage = clWidgets.StockButton(gtk.STOCK_GO_FORWARD)
            self.sbNextPage.set_tooltip_text(_("Next page"))
            self.sbNextPage.connect("clicked", self.on_sbNextPage_clicked)
            self.pack_end(self.sbNextPage, False, True, 0)
            self.sbNextPage.show()

            self.lCurPage = gtk.Label("")
            self.pack_end(self.lCurPage, False, True, 0)
            self.lCurPage.show()

            self.sbPrevPage = clWidgets.StockButton(gtk.STOCK_GO_BACK)
            self.sbPrevPage.set_tooltip_text(_("Previous page"))
            self.sbPrevPage.connect("clicked", self.on_sbPrevPage_clicked)
            self.sbPrevPage.set_sensitive(False)
            self.pack_end(self.sbPrevPage, False, True, 0)
            self.sbPrevPage.show()

            self.sbJumpToPage = clWidgets.StockButton(gtk.STOCK_JUMP_TO)
            self.sbJumpToPage.set_tooltip_text(_("Jump to page..."))
            self.sbJumpToPage.connect("clicked", self.on_sbJumpToPage_clicked)
            self.pack_end(self.sbJumpToPage, False, True, 0)
            self.sbJumpToPage.show()
            
#            self.show_all()

        def cbResultsPerPage_changed(self, widget=None):
            self.layout.results_per_page = int(self.pyjama.window.get_active_text(self.cbResultsPerPage))
            if widget is not None:
                if widget.auto_setting_item: return


            self.pyjama.layouts.show_layout("radios", 1, self.layout.results_per_page, None, None, who_called = "cbResultsPerPage_changed")
            #print self.results_per_page

        def on_sbJumpToPage_clicked(self, ev):
            result = clEntry.input_box(title=_('Jump to page'),
                message=_('Enter Page'),
                default_text="%i" % (self.layout.cur_page+10))
            if result is None:
                return None
            elif not result.isdigit():
                dia = clWidget.MyDialog(_('invalid expression'),
                                  self.get_toplevel(),
                                  gtk.DIALOG_MODAL | gtk.DIALOG_DESTROY_WITH_PARENT, 
                                    (gtk.STOCK_OK, gtk.RESPONSE_ACCEPT),        gtk.STOCK_DIALOG_WARNING, _('\'%s\' is not a valid page') % str(result))
                dia.run()
                dia.destroy()
                return None
            else:
                page = int(result)
            self.pyjama.layouts.show_layout("radios", page, self.layout.results_per_page, None, None, who_called = "on_sbjumptopage_clicked")
            self.layout.check_next_possible()
            self.layout.check_prev_possible()
                
        def on_sbNextPage_clicked(self, ev):
            self.pyjama.layouts.show_layout("radios", self.layout.cur_page+1, self.layout.results_per_page,  None, None ,who_called = "on_sbnextpage_clicked")
            self.layout.check_next_possible()

        def on_sbPrevPage_clicked(self, ev):
            self.pyjama.layouts.show_layout("radios", self.layout.cur_page-1, self.layout.results_per_page, None, None, None, who_called = "on_sbprevpage_clicked")
            self.layout.check_prev_possible()
            
