#!/usr/bin/env python
# -*- coding: utf-8 -*-

# ----------------------------------------------------------------------------
# pyjama - python jamendo audioplayer
# Copyright (c) 2008 Daniel NÃ¶gel
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, version 3 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
# ----------------------------------------------------------------------------

import gtk
import gobject
import os
import time
from threading import Thread

from modules import functions


def threaded(f):
    def wrapper(*args, **kwargs):
        t = Thread(target=f, args=args, kwargs=kwargs)
        t.start()
    return wrapper

@threaded
class main():
    def __init__(self, pyjama):
        self.pyjama = pyjama

        self.pyjama.Events.connect_event("nowplaying", self.ev_nowplaying)
        self.pyjama.Events.connect_event("alldone", self.ev_alldone)

        self.pyjama.Events.connect_event("playlist_tooltip",  self.ev_playlist_tooltip)

        self.pyjama.preferences.register_plugin("Listenstats", self.create_preferences, self.save_preferences)

    @threaded
    def ev_playlist_tooltip(self, x, y, tooltip_boxes):
        vbox1, vbox2 = tooltip_boxes
        path = self.pyjama.window.tvPlaylist.get_path_at_pos(int(x), int(y))

        if path:
            track = self.pyjama.player.playlist[path[0][0]]

#            label_desc = gtk.Label()
#            label_desc.set_markup(_("<u>Listen\nstats:</u>"))
#            label_desc.show()
            img = gtk.Image()
            pix = gtk.gdk.pixbuf_new_from_file_at_size(os.path.join(functions.install_dir(), "plugins", "listenstats", "listenstats.png"), 25, 25)
            img.set_from_pixbuf(pix)
            img.show()
            vbox1.pack_start(img, False, True)

            trackcount = self.pyjama.settingsdb.get_value("listenstats_tracks", track.id, 0)
            artistcount = self.pyjama.settingsdb.get_value("listenstats_artists", track.artist_id, 0)
            albumcount = self.pyjama.settingsdb.get_value("listenstats_albums", track.album_id, 0)
            label = gtk.Label()
            label.set_markup(_("Artist: %i\nAlbum: %i\nTrack: %i" % (artistcount, albumcount, trackcount)))
            label.show()
            vbox2.pack_start(label, False, True)

#        self.pyjama.Events.connect_event("populate_playlistmenu", self.ev_populate_playlistmenu)
#        self.pyjama.Events.connect_event("populate_listmenu", self.ev_populate_listmenu)

#    def ev_populate_listmenu(self, rootmenu):
#        selection = self.pyjama.window.tvList.get_selection()
#        model, tmpIter = selection.get_selected()
#        if tmpIter is None: return

#        path =  model.get_path(tmpIter)
#        ret = self.pyjama.window.tvList.get_item(path)
#        track = {}
#        track['id'] = ret[self.pyjama.window.tvList.COLUMN_TRACKID]
#        if track['id'] < 0: return


#        mnu = gtk.ImageMenuItem("Add track to playlist")
#        rootmenu.append(mnu)

#        try:
#            img = gtk.Image()
#            pix = gtk.gdk.pixbuf_new_from_file_at_size(os.path.join(functions.install_dir(), "plugins", "playlists", "playlists.png"), 16, 16)
#            img.set_from_pixbuf(pix)
#            mnu.set_image(img)
#        except:
#            print ("Playlist image not found or corrupt")


#        submenu = gtk.Menu()
#        addnew = gtk.ImageMenuItem("Create new playlist")
#        addnew.connect("activate", self.cb_addnew_playlist_activate, track)
#        img = gtk.Image()
#        img.set_from_stock(gtk.STOCK_ADD, gtk.ICON_SIZE_MENU)
#        addnew.set_image(img)
#        addnew.show()
#        submenu.append(addnew)
#        sep = gtk.SeparatorMenuItem()
#        sep.show()
#        submenu.append(sep)

#        if self.pyjama.settings.section_exists("Playlists"):
#            playlists = self.pyjama.settings.config.items("Playlists")
#            for name, ids in playlists:
#                tmp = gtk.ImageMenuItem(name.replace("_", "__"))
#                tmp.connect("activate", self.cb_append_to_playlist, name, track)
#                submenu.append(tmp)
#                tmp.show()

#        mnu.set_submenu(submenu)
#        submenu.show()
#        mnu.show()

#    def ev_populate_playlistmenu(self, rootmenu):
#        model, tmpIter = self.pyjama.window.tvSelection.get_selected()
#        if tmpIter is None: return
#        path =  model.get_path(tmpIter)
#        track = self.pyjama.player.playlist[path[0]]

#        mnu = gtk.ImageMenuItem("Add track to playlist")
#        rootmenu.append(mnu)

#        try:
#            img = gtk.Image()
#            pix = gtk.gdk.pixbuf_new_from_file_at_size(os.path.join(functions.install_dir(), "plugins", "playlists", "playlists.png"), 16, 16)
#            img.set_from_pixbuf(pix)
#            mnu.set_image(img)
#        except:
#            print ("Playlist image not found or corrupt")

#        submenu = gtk.Menu()
#        addnew = gtk.ImageMenuItem("Create new playlist")
#        addnew.connect("activate", self.cb_addnew_playlist_activate, track)
#        img = gtk.Image()
#        img.set_from_stock(gtk.STOCK_ADD, gtk.ICON_SIZE_MENU)
#        addnew.set_image(img)
#        addnew.show()
#        submenu.append(addnew)
#        sep = gtk.SeparatorMenuItem()
#        sep.show()
#        submenu.append(sep)

#        if self.pyjama.settings.section_exists("Playlists"):
#            playlists = self.pyjama.settings.config.items("Playlists")
#            for name, ids in playlists:
#                tmp = gtk.ImageMenuItem(name.replace("_", "__"))
#                tmp.connect("activate", self.cb_append_to_playlist, name, track)
#                submenu.append(tmp)
#                tmp.show()

#        mnu.set_submenu(submenu)
#        submenu.show()
#        mnu.show()
    @threaded
    def ev_alldone(self):
        gobject.timeout_add(1, self.ev_alldone2)

    @threaded
    def ev_alldone2(self):
        # Append menu entry
        menu = self.pyjama.window.menubar
#        entry = menu.append_entry(menu.get_rootmenu("Extras"), _("Listen statistics"), "listenstats")
        entry = menu.insert_entry(5, menu.get_rootmenu("Extras"), _("Listen statistics"), "listenstats")
        menu.set_item_image(entry, os.path.join(functions.install_dir(), "plugins", "listenstats", "listenstats.png"))

        submenu = gtk.Menu()
        entry.set_submenu(submenu)
        submenu.show()

        ### TRACKS
        tracks = gtk.ImageMenuItem(_("Most listened tracks"))
        menu.set_item_image(tracks, "juk.png")
        tracks.connect("enter-notify-event", self.cb_enter_notify_event, "track")
        tracks.show()
        submenu.append(tracks)

        self.trackmenu = gtk.Menu()
        self.trackmenu.populated = False
        self.trackmenu.show()
        tracks.set_submenu(self.trackmenu)

        self.trackmenu.play = gtk.ImageMenuItem(_("Play most listened tracks"))
        self.trackmenu.play.connect("activate", self.cb_play_most_listened_tracks)
        self.pyjama.window.menubar.set_item_image(self.trackmenu.play, gtk.STOCK_MEDIA_PLAY)
        self.trackmenu.play.show()
        self.trackmenu.append(self.trackmenu.play)
        self.trackmenu.sep = gtk.SeparatorMenuItem()
        self.trackmenu.sep.show()
        self.trackmenu.append(self.trackmenu.sep)


        ### ALBUMS
        albums = gtk.ImageMenuItem(_("Most listened albums"))
        menu.set_item_image(albums, "cd.png")
        tracks.connect("enter-notify-event", self.cb_enter_notify_event, "album")
        albums.show()
        submenu.append(albums)

        self.albummenu = gtk.Menu()
        self.albummenu.show()
        albums.set_submenu(self.albummenu)

        self.albummenu.play = gtk.ImageMenuItem(_("Play most listened Albums"))
        self.albummenu.play.connect("activate", self.cb_play_most_listened_albums)
        self.pyjama.window.menubar.set_item_image(self.albummenu.play, gtk.STOCK_MEDIA_PLAY)
        self.albummenu.play.show()
        self.albummenu.append(self.albummenu.play)
        self.albummenu.sep = gtk.SeparatorMenuItem()
        self.albummenu.sep.show()
        self.albummenu.append(self.albummenu.sep)

        ## TAGS
        tags = gtk.ImageMenuItem(_("Most listened tags"))
        menu.set_item_image(tags, "blue_grey_tag_T.png")
        tags.connect("enter-notify-event", self.cb_enter_notify_event, "tag")
        tags.show()
        submenu.append(tags)

        self.tagmenu = gtk.Menu()
        self.tagmenu.populated = False
        self.tagmenu.show()
        tags.set_submenu(self.tagmenu)

        self.tagmenu.play = gtk.ImageMenuItem(_("Play most listened Albums"))
        self.tagmenu.play.connect("activate", self.cb_play_most_listened_albums)
        self.pyjama.window.menubar.set_item_image(self.tagmenu.play, gtk.STOCK_MEDIA_PLAY)
#        self.tagmenu.play.show()
        self.tagmenu.append(self.tagmenu.play)
        self.tagmenu.sep = gtk.SeparatorMenuItem()
#        self.tagmenu.sep.show()
        self.tagmenu.append(self.tagmenu.sep)

        ## LASTLISTENED
        lastlistened = gtk.ImageMenuItem(_("Last listened Tracks"))
        menu.set_item_image(lastlistened, "calendar.png")
#        lastlistened.connect("enter-notify-event", self.cb_enter_notify_event, "lastlistened")
        lastlistened.show()
        submenu.append(lastlistened)

        self.lastlistenedmenu = gtk.Menu()
        self.lastlistenedmenu.populated = False
        self.lastlistenedmenu.show()
        lastlistened.set_submenu(self.lastlistenedmenu)


        #
        # Total listened to
        #
        self.totallistened = gtk.ImageMenuItem(_("%i tracks listened to." % 0))
        self.totallistened.set_sensitive(False)
        self.totallistened.show()
        submenu.append(self.totallistened)



#        self.tagmenu.play = gtk.ImageMenuItem(_("Play most listened Albums"))
#        self.tagmenu.play.connect("activate", self.cb_play_most_listened_albums)
#        self.pyjama.window.menubar.set_item_image(self.tagmenu.play, gtk.STOCK_MEDIA_PLAY)
##        self.tagmenu.play.show()
#        self.tagmenu.append(self.tagmenu.play)
#        self.tagmenu.sep = gtk.SeparatorMenuItem()
##        self.tagmenu.sep.show()
#        self.tagmenu.append(self.tagmenu.sep)


#        ## ID3
#        id3 = gtk.ImageMenuItem(_("Print most popular ID3 Tags"))
#        id3.connect("enter-notify-event", self.cb_enter_notify_event, "id3")
#        id3.show()
#        submenu.append(id3)

#        menu.set_item_image(entry, os.path.join(functions.install_dir(), "images", "star.png"))

        self.populate_lastlistened()
        self.update_listened_tracks()
        
        self.populate_trackmenu()
        self.populate_albummenu()

    @threaded
    def cb_enter_notify_event(self, widget, event, source):
        if source == "track":
            if self.trackmenu.populated == False:
                self.populate_trackmenu()
                self.trackmenu.populated = True
        elif source == "album":
            pass
        elif source == "tag":
            if self.tagmenu.populated == False:
                self.populate_tagmenu()
                self.tagmenu.populated = True
        elif source == "id3":
            sql = "SELECT option, value FROM settings WHERE section='listenstats_genres' ORDER BY value DESC"
            ret = self.pyjama.settingsdb.query(sql)
            for (id3, count) in ret:
                print functions.id2genre(id3), ":", count
        elif source == "lastlistened":
            self.populate_lastlistened()

    @threaded
    def cb_play_track(self, widget, track):
        cur = len(self.pyjama.player.playlist)

        self.pyjama.add2playlist(track)

        self.pyjama.window.on_bStop_clicked(None)
        self.pyjama.setplaylist(cur)
        self.pyjama.window.on_bPlay_clicked(None) 

    @threaded
    def cb_play_album(self, widget, album):
        tracks = self.pyjama.db.albumtracks(album)
        self.pyjama.appendtracks(tracks, play=True)

    def cb_load_tag(self, widget, tag):
        self.pyjama.layouts.show_layout("top", 10, "ratingweek", 1, tag, who_called = "cb_load_tag")

    @threaded
    def update_listened_tracks(self):
        sql = "SELECT SUM(value) FROM settings WHERE section='listenstats_tracks'"
        result = self.pyjama.settingsdb.query(sql)

        if result == []: return
        try:
            sum = result[0][0]
        except Exception, inst:
            print("Error (%s): Could not get total num of tracks listened to." % inst)
        else:
            if sum is not None:
                self.totallistened.get_children()[0].set_text(_("%i tracks listened to." % sum))

    @threaded
    def populate_albummenu(self):
        ALBUM_NAME = 0
        ARTIST_NAME = 2

        sql = "SELECT option, value FROM settings WHERE section='listenstats_albums' ORDER BY value DESC LIMIT %s" % \
            self.pyjama.settings.get_value("listenstats", "max_albums", 5)
        result = self.pyjama.settingsdb.query(sql)

        if result == []: return


        cur = len(self.pyjama.player.playlist)

        for child in self.albummenu.get_children():
            if child is not self.albummenu.play and child is not self.albummenu.sep:
                self.albummenu.remove(child)

        counter = 0
        for items in result:
            album_id = items[0]
            sql = "SELECT albums.name, albums.id, artists.name FROM albums, artists WHERE albums.id=%s and artists.id=albums.artist_id" % album_id
            ret = self.pyjama.db.query(sql)
            if ret:
    #            tracks = DB(self.pyjama).albumtracks(album_id)
    #            self.pyjama.appendtracks(tracks)
                tmp = gtk.ImageMenuItem("%ix: %s: %s" % (result[counter][1], ret[0][ARTIST_NAME], ret[0][ALBUM_NAME]))
                tmp.connect("activate", self.cb_play_album, album_id)
                tmp.show()
                self.albummenu.append(tmp)

                counter +=1
    @threaded
    def populate_tagmenu(self):
        sql = "SELECT option, value FROM settings WHERE section='listenstats_tags' and value>=%i ORDER BY value DESC LIMIT 10" % 5
        result = self.pyjama.settingsdb.query(sql)

        if result == []: return

        for child in self.tagmenu.get_children():
            if child is not self.tagmenu.play and child is not self.tagmenu.sep:
                self.tagmenu.remove(child)

        for item in result:
            tmp = gtk.ImageMenuItem("%ix: %s" % (item[1], item[0]))
            tmp.connect("activate", self.cb_load_tag, item[0])
            tmp.show()
            self.tagmenu.append(tmp)
    @threaded
    def populate_trackmenu(self):
        sql = "SELECT option, value FROM settings WHERE section='listenstats_tracks' and value>=%i ORDER BY value DESC LIMIT %i" % \
        (
            self.pyjama.settings.get_value("listenstats", "minimum_listens", 3),
            self.pyjama.settings.get_value("listenstats", "tracks_num", 20)
        ) 
        result = self.pyjama.settingsdb.query(sql)

        if result == []: return

        tracks = []
        for items in result:
            tracks.append(items[0])
        ret = self.pyjama.db.get_multiple_trackinfos(tracks)

        for child in self.trackmenu.get_children():
            if child is not self.trackmenu.play and child is not self.trackmenu.sep:
                self.trackmenu.remove(child)

        cur = len(self.pyjama.player.playlist)

        # add tracks to playlist sorted by listen counts
        counter = 0
        for track_id in tracks:
            for track in ret:
                if track.id == track_id:
                    tmp = gtk.ImageMenuItem("%ix: %s - %s" % (result[counter][1], track.artist_name, track.name))
                    tmp.connect("activate", self.cb_play_track, track)
                    tmp.show()
                    self.trackmenu.append(tmp)
            counter += 1

    @threaded
    def populate_lastlistened(self):
        self.update_listened_tracks()

        for child in self.lastlistenedmenu.get_children():
            self.lastlistenedmenu.remove(child)

#        tmpsettingsdb = clDB.DB_Settings(self.pyjama)
        sql = "SELECT option, value FROM settings WHERE section='listenstats_lastlistened' ORDER BY value DESC LIMIT %s" % \
            self.pyjama.settings.get_value("listenstats", "last_listened_tracks", 20)
        recenttracks = self.pyjama.settingsdb.query(sql)
#        tmpsettingsdb.close()
        if recenttracks != []:
            trackids = []
            for item in recenttracks:
                track_id, last_played_time = item
                trackids.append(track_id)

            trackinfos = self.pyjama.db.get_multiple_trackinfos(trackids)
            if trackinfos != []:
                for item in recenttracks:
                    for track in trackinfos:
                        if item[0] == track.id:
#                            print track.name, time.strftime("%H:%M:%S %d.%m.%Y",time.localtime(item[1]))
                            time_str = time.strftime("%d.%m.%Y %H:%M:%S",time.localtime(item[1]))
                            tmp = gtk.ImageMenuItem("%s - %s (%s)" % (track.artist_name, track.name, time_str))
                            tmp.connect("activate", self.cb_play_track, track)
                            tmp.show()
                            self.lastlistenedmenu.append(tmp)
            else:
                print ("Did not get any trackinfos for the recent tracks")
        else:
            print ("No recent tracks found")

    @threaded
    def ev_nowplaying(self, track):
        self.pyjama.settingsdb.set_value("listenstats_lastlistened", track.id, time.time())

        self.pyjama.settingsdb.increase_value("listenstats_tracks", track.id)
        self.pyjama.settingsdb.increase_value("listenstats_albums", track.album_id)
        self.pyjama.settingsdb.increase_value("listenstats_artists", track.artist_id)

        sql = "SELECT idstr FROM tags WHERE track_id='%s' ORDER BY weight DESC" % track.id
        ret = self.pyjama.db.query(sql)
        if ret != []:
            for item in ret:
                self.pyjama.settingsdb.increase_value("listenstats_tags", item[0])
        else:
            if self.pyjama.verbose:
               print("This track has no tag")

        sql = "SELECT id3genre FROM tracks WHERE tracks.id='%s'" % track.id
        ret = self.pyjama.db.query(sql)
        if ret != []:
            genre_id = ret[0][0]
            #genre = functions.id2genre(genre_id)
            self.pyjama.settingsdb.increase_value("listenstats_genres", genre_id)
            if self.pyjama.verbose:
                print ("Genre: %s" % functions.id2genre(genre_id))

        self.populate_lastlistened()

#        print("You have listened to this track %s times before!!" % self.pyjama.settingsdb.get_value("listenstats_tracks", track['id']))
#        print("You have listened to this album %s times before!!" % self.pyjama.settingsdb.get_value("listenstats_albums", track['album_id']))

    @threaded
    def cb_play_most_listened_albums(self, widget):
        sql = "SELECT option, value FROM settings WHERE section='listenstats_albums' ORDER BY value DESC LIMIT %s" % self.max_albums_to_query
        result = self.pyjama.settingsdb.query(sql)

        if result == []: return

        cur = len(self.pyjama.player.playlist)

        for items in result:
            album_id = items[0]
            tracks = self.pyjama.db.albumtracks(album_id)
            self.pyjama.appendtracks(tracks)

        self.pyjama.window.on_bStop_clicked(None)
        self.pyjama.setplaylist(cur)
        self.pyjama.window.on_bPlay_clicked(None) 

    @threaded
    def cb_play_most_listened_tracks(self, widget):
        sql = "SELECT option, value FROM settings WHERE section='listenstats_tracks' and value>=%i ORDER BY value DESC" % self.minimum_listens
        result = self.pyjama.settingsdb.query(sql)

        if result == []: return

        tracks = []
        for items in result:
            tracks.append(items[0])
        ret = self.pyjama.db.get_multiple_trackinfos(tracks)

        cur = len(self.pyjama.player.playlist)

        # add tracks to playlist sorted by listen counts
        for track_id in tracks:
            for item in ret:
                if ret[item]['id'] == track_id:
                    self.pyjama.add2playlist(ret[item])
        self.pyjama.window.on_bStop_clicked(None)
        self.pyjama.setplaylist(cur)
        self.pyjama.window.on_bPlay_clicked(None) 

#        self.pyjama.appendtracks(ret, True)

    def create_preferences(self):
        vbox = gtk.VBox()
#        label = gtk.Label()
#        label.set_markup(_("<b>Listen Statistics Preferences</b>"))
#        label.set_line_wrap(True)
#        label.set_single_line_mode(False)
#        vbox.pack_start(label, False, True)

        hbox = gtk.HBox()
        vbox.pack_start(hbox, False, True, 10)
        hbox.show()

        hbox2 = gtk.HBox()
        vbox.pack_start(hbox2, False, True, 10)
        hbox2.show()

        ## Minimum listens
        lblMinListen = gtk.Label()
        tt = _("How often must a song have been played to appear in the stats?")
        lblMinListen.set_tooltip_text(tt)
        lblMinListen.set_markup(_("Minimum Listens"))
        lblMinListen.set_line_wrap(True)
        lblMinListen.set_single_line_mode(False)
        lblMinListen.show()
        hbox.pack_start(lblMinListen, False, True, 10)

        self.spin1 = gtk.SpinButton()
        self.spin1.set_tooltip_text(tt)
        self.spin1.set_range(0,100)
        self.spin1.set_range(0,100)
        self.spin1.set_increments(1,10)
        self.spin1.set_value(self.pyjama.settings.get_value("listenstats", "minimum_listens", 3, float))
        hbox.pack_end(self.spin1, False, True, 10)

        ## Maximum ALbums
        lblMaxAlbums = gtk.Label()
        lblMaxAlbums.set_markup(_("Number of albums"))
        tt = _("How many albums should be shown at most in 'Most listened albums'?")
        lblMaxAlbums.set_tooltip_text(tt)
        lblMaxAlbums.set_line_wrap(True)
        lblMaxAlbums.set_single_line_mode(False)
        lblMaxAlbums.show()
        hbox2.pack_start(lblMaxAlbums, False, True, 10)

        self.spin2 = gtk.SpinButton()
        self.spin2.set_tooltip_text(tt)
        self.spin2.set_range(0,100)
        self.spin2.set_increments(1,10)
        self.spin2.set_value(self.pyjama.settings.get_value("listenstats", "max_albums", 5, float))
        hbox2.pack_end(self.spin2, False, True, 10)
        
        vbox.show_all()
        return vbox        


    def save_preferences(self):
        self.pyjama.settings.set_value("listenstats", "max_albums", self.spin2.get_value(), int)
        self.pyjama.settings.set_value("listenstats", "minimum_listens", self.spin1.get_value(), int)

        self.populate_albummenu()
        self.populate_trackmenu()

