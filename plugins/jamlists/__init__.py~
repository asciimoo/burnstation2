#!/usr/bin/env python
# -*- coding: utf-8 -*-

# ----------------------------------------------------------------------------
# pyjama - python jamendo audioplayer
# Copyright (c) 2008 Daniel NÃ¶gel
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
# ----------------------------------------------------------------------------

#http://api.jamendo.com/get2/id/track/jsonpretty/?n=100&order=ratingweek_desc

import gtk
import gobject
import os

from modules import functions
from modules import clWidgets

from threading import Thread
from time import sleep

class NumCombo(gtk.ComboBox):
    def __init__(self, num):
        liststore = gtk.ListStore(gobject.TYPE_STRING)
        gtk.ComboBox.__init__(self, liststore)
        cell = gtk.CellRendererText()

        self.pack_start(cell, True)
        self.add_attribute(cell, 'text', 0)
        
        self.modelist = num
        for mode in self.modelist:
            self.append_text(str(mode))
        self.set_active(0)
        
    def set_item(self, mode):
        self.set_active(self.modelist.index(mode))

class SelectCriteriaDialog(gtk.Dialog):
    def __init__(self, pyjama):
        self.pyjama = pyjama
        gtk.Dialog.__init__(self)

        self.set_modal(True)
        self.set_resizable(False)
        self.set_title("Generate custom charts")

        hbox = gtk.HBox()
        self.vbox.pack_start(hbox, False, True)
        hbox.show()

        l = gtk.Label("Get the")
        hbox.pack_start(l, False, True)
        l.show()

        self.num = NumCombo([10,20,40,60,80,100,150,200])
        self.num.set_tooltip_text(_("Number of songs to add to the playlist"))
        hbox.pack_start(self.num, False, True)
        self.num.show()

        l = gtk.Label("best songs of the category")
        hbox.pack_start(l, False, True)
        l.show()

        ## linebreak

        hbox = gtk.HBox()
        self.vbox.pack_start(hbox, False, True)
        hbox.show()

        self.order = clWidgets.OrderCombo()
        self.order.set_tooltip_text(_("From which list should the songs be taken?."))
        hbox.pack_start(self.order, False, True)
        self.order.show()

        l = gtk.Label("and the tag")
        hbox.pack_start(l, False, True)
        l.show()

        self.tags = clWidgets.TagsCombo(self.pyjama)
        self.tags.set_tooltip_text(_("Tag you want to select random songs from."))
        hbox.pack_start(self.tags, False, True)
        self.tags.show()

        self.add_button(gtk.STOCK_OK, gtk.RESPONSE_OK)


class main():
    def __init__(self, pyjama):
        self.pyjama = pyjama

        self.pyjama.Events.connect_event("alldone", self.ev_alldone)

    def ev_alldone(self):
        menu = self.pyjama.window.menubar

#        entry = menu.append_entry(menu.get_rootmenu("Extras"), "---", "jamlists-sep")

        entry = menu.append_entry(menu.get_rootmenu("Extras"), _("Jamendo Playlists"), "jamlists")
        menu.set_item_image(entry, os.path.join(functions.install_dir(), "images", "playlist.png"))

        submenu = gtk.Menu()
        entry.set_submenu(submenu)
        submenu.show()

        ### Top 100
        top100 = gtk.ImageMenuItem(_("This weeks top 100 charts"))
        menu.set_item_image(top100, os.path.join(functions.install_dir(), "plugins", "jamlists", "100.png"))
        top100.connect("activate", self.cb_menuactivate, "top100")
        top100.show()
        submenu.append(top100)

        ### Custom Top
        customtop = gtk.ImageMenuItem(_("Generate custom charts"))
#        menu.set_item_image(customtop, "100.png")
        customtop.connect("activate", self.cb_menuactivate, "customtop")
        customtop.show()
        submenu.append(customtop)

        sep = gtk.SeparatorMenuItem()
        sep.show()
        submenu.append(sep)

        ### Top Playlists
        self.toplists = gtk.ImageMenuItem(_("Best rated Playlists"))
        self.toplists.show()
        submenu.append(self.toplists)

        self.toplists_submenu = gtk.Menu()
        self.toplists_submenu.show()
        self.toplists.set_submenu(self.toplists_submenu)

        ### Playlists powered by Jamendo
        self.jamlists = gtk.ImageMenuItem(_("Official Jamendo Playlists"))
        self.jamlists.show()
        submenu.append(self.jamlists)



        # Get top playlists in a new thread
        thr = Thread(target = self.load_playlists, args = ())
        thr.start()


    def load_playlists(self):
        ## toplists
        self.pyjama.jamendo.last_query_hack()
        query = "id+name/playlist/jsonpretty/?n=%i&order=starred_desc" % self.pyjama.settings.get_value("jamlists", "number_of_playlists", 20)
        ret = self.pyjama.jamendo.query(query, self.pyjama.settings.get_value("JAMENDO", "CACHING_TIME_SHORT"),raise_query_event=False)
        
        if ret == [] or ret is None or ret <= 0 or ret == "":
            self.toplists.set_sensitive(False)
            return

        for track in ret:
            tmp = gtk.ImageMenuItem(track['name'].replace("_", "__"))
            self.toplists_submenu.append(tmp)
            tmp.connect("activate", self.cb_menuactivate, "playlist", track['id'])
            tmp.show()

        sleep(1)
        self.pyjama.jamendo.last_query_hack()

        ## jamlists
        ret = self.pyjama.jamendo.query("name+id/playlist/json/?user_idstr=%s&n=all" % "bestofjam", self.pyjama.settings.get_value("JAMENDO", "CACHING_TIME_SHORT"), raise_query_event=False)

        if ret == [] or ret is None or ret <= 0 or ret == "":
            self.jamlists.set_sensitive(False)
            return

        mnu = gtk.Menu()
        self.jamlists.set_submenu(mnu)
        mnu.show()

        for track in ret:
            tmp = gtk.ImageMenuItem(track['name'].replace("_", "__"))
            mnu.append(tmp)
            tmp.connect("activate", self.cb_menuactivate, "bestofjam", track['id'])
            tmp.show()
            

    def cb_menuactivate(self, widget, user_param, id=None):
        if user_param == "top100":
            query = "id/track/jsonpretty/?n=100&order=ratingweek_desc"
            ret = self.pyjama.jamendo.query(query, self.pyjama.settings.get_value("JAMENDO", "CACHING_TIME_SHORT"), raise_query_event=False)
            if not ret < 0 and ret != [] and ret is not None and ret != "":
                retdb = self.pyjama.db.get_multiple_trackinfos(ret)
                if retdb is not None and retdb != []:
                    for item in ret:
                        for track_db in retdb:
                            if track_db.id == item:
                                self.pyjama.add2playlist(track_db)
            else:
                print ("There was an error getting the top 100 list")
        elif user_param == "toplists":
            print toplists
        elif user_param == "playlist":
            if id is None:
                print ("Error: No playlist id was given")
            else:
                query = "track_id/playlist/jsonpretty/playlist_track/?n=all&playlist_id=%i" % id
                ret = self.pyjama.jamendo.query(query, self.pyjama.settings.get_value("JAMENDO", "CACHING_TIME_SHORT"), raise_query_event=False)
                if not ret < 0 and ret != [] and ret is not None and ret != "":
                    for track in ret:
                        ret = self.pyjama.db.get_trackinfos2(track)
                        if ret == []:
                            print ("The track with the id %i wasn't found in the database" % track)
                        else:
                            self.pyjama.add2playlist(ret)
        elif user_param == "bestofjam":
            if id is None:
                print ("Error: No playlist id was given")
            else:
                query = "track_id/playlist/jsonpretty/playlist_track/?n=all&playlist_id=%i" % id
                ret = self.pyjama.jamendo.query(query, self.pyjama.settings.get_value("JAMENDO", "CACHING_TIME_SHORT"), raise_query_event=False)
                if not ret < 0 and ret != [] and ret is not None and ret != "":
                    for track in ret:
                        ret = self.pyjama.db.get_trackinfos2(track)
                        if ret == []:
                            print ("The track with the id %i wasn't found in the database" % track)
                        else:
                            self.pyjama.add2playlist(ret)
        elif user_param == "customtop":
            dia = SelectCriteriaDialog(self.pyjama)
            result = dia.run()
            dia.destroy()

            if result != gtk.RESPONSE_OK:
                return None

            num = int(self.pyjama.window.get_active_text(dia.num))
            order = self.pyjama.window.get_active_text(dia.order)
            tag = dia.tags.entry.get_text()

            if tag == _("--all--"):
                query = "id/track/json/?n=%i&order=%s_%s" % (num, order, "desc")
                if self.pyjama.verbose:
                    print("Getting %i tracks ordered by %s_%s - genre is %s." % (num, order, "desc", tag))
            else:
                query = "id/track/json/?n=%i&order=%s_%s&tag_idstr=%s" % (num, order, "desc", tag)
                if self.pyjama.verbose:
                    print("Getting %i tracks ordered by %s_%s - genre is %s." %(num, order, "desc", tag))
            ret = self.pyjama.jamendo.query(query, self.pyjama.settings.get_value("JAMENDO", "CACHING_TIME_SHORT"), raise_query_event=False)
            if not ret < 0 and ret != [] and ret is not None and ret != "":
                retdb = self.pyjama.db.get_multiple_trackinfos(ret)
                if retdb is not None and retdb != []:
                    for item in ret:
                        for track_db in retdb:
                            if track_db.id == item:
                                self.pyjama.add2playlist(track_db)
            else:
                print ("There was an error getting the top 100 list")
